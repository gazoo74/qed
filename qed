#!/bin/sh

# This file is part of the qed project (https://github.com/vivien/qed).
#
# Copyright (c) 2016-2017 Vivien Didelot
# Copyright (c) 2016-2017 Lionel Nicolas
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

# exit on failure
set -e

# exit on unassigned variable
set -u

# define colors
RESTORE='\033[0m'
RED='\033[01;31m'
GREEN='\033[01;32m'
YELLOW='\033[01;33m'
BLUE='\033[01;34m'

# define logging fumctions
logme() {
	echo "\n${GREEN}$*${RESTORE}\n"
}

fatal() {
	echo "\n${RED}$*${RESTORE}\n" >&2
	exit 1
}

# define usage
usage() {
	echo "usage: $0 [-h] [-d DISTRIBUTION] [-i] [-l] [-r] [-b] [-p] [CMD ARGS]"
	echo
	echo "	-h	show this help message"
	echo "	-d	target distribution image (a custom one can be used, like 'my.registry/builder/ubuntu:10.04')"
	echo "	-i	enter interactive mode"
	echo "	-b	force re-build of a local docker base image"
	echo "	-p	force pull of docker base image from registry"
	echo "	-r	remove all containers associated to current working directory"
	echo
	exit ${1:-0}
}

list() {
	echo "listing containers"
	# TODO
}

remove() {
	echo "removing containers"
	# TODO
}

run() {
	if [ -z "$*" ]; then
		fatal "no command to execute supplied"
	fi

	# force pull if docker image is not found (and 'build' is not requested)
	if ! ${pull} && ! ${rebuild}; then
		if [ -z "`docker images -q ${hash}-${project}-${distribution}`" ]; then
			pull=true
		fi
	fi

	# (re)build docker image
	if ${rebuild}; then
		if [ -f ".qed/dockerfile.${distribution}" ]; then
			docker build \
				--tag ${hash}-${project}-${distribution_sanitized} \
				--file .qed/dockerfile.${distribution} \
				${docker_build_args:-} \
				.qed/

		else
			fatal "no dockerfile corresponding to ${distribution} found in .qed/ directory"
		fi

	# only pull distribution image to use it directly (without any changes)
	elif ${pull}; then
		docker pull ${distribution}
		docker tag ${distribution} ${hash}-${project}-${distribution_sanitized}
	fi

	logme "running command '$@' within ${distribution} (docker image is ${hash}-${project}-${distribution_sanitized})"
	exec docker run \
		--rm \
		${interactive} \
		--volume ${PWD}:${PWD} \
		--workdir ${PWD} \
		--user `id -u`:`id -g` \
		${hash}-${project}-${distribution_sanitized} \
		$@
}

# default values
distribution=default
curdir=${PWD}
project=$(basename ${PWD})
hash=$(pwd | sha1sum | cut -c 1-8)
interactive=
rebuild=false
pull=false
list=false
remove=false
action=run

# parse parameters
while getopts "hd:ilrbp" opt; do
	case $opt in
		h) usage 0 ;;
		d) distribution="${OPTARG}" ;;
		i) interactive="--interactive --tty" ;;
		b) rebuild=true ;;
		p) pull=true ;;
		l) action=list ;;
		r) action=remove ;;
		*) usage 1;;
	esac
done

# skip all qed parameters
shift "$((OPTIND-1))"

# check distribution parameter
if [ -z "${distribution}" ]; then
	fatal "distribution is not set"
fi

# sanitize distribution name
distribution_sanitized=`echo ${distribution} | sed 's/:/-/g' | rev | cut -d/ -f1 | rev`

# check action
case ${action} in
	list|remove|run)
		${action} $@;;

	*)
		usage 3 ;;
esac
